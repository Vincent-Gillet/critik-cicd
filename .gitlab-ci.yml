---
stages:
  - build
#  - test
  - package
  - deploy

variables:
  NAME_PROJECT: -cirtik

.build:
  stage: build
  retry: 1
  interruptible: true

.change-folder:
  before_script:
    - cd ${APP_DIR}

.client-cache:
  cache:
    - key: client-package-lock-${CI_COMMIT_REF_SLUG}
      paths:
        - ${APP_DIR}/node_modules/
        - ${APP_DIR}/.npm/

.docker-build:
  stage: package
  image: gcr.io/kaniko-project/executor:debug
  variables:
    DOCKER_CONFIG: /kaniko/.docker
  before_script:
    - mkdir -p /kaniko/.docker
    - |
      # create portable base64 auths (avoid `-w0` which may be missing)
      GITLAB_AUTH=$(printf '%s' "${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')
      # build JSON and optionally add Docker Hub auth only if provided
      if [ -n "${DOCKERHUB_USERNAME}" ]; then
        DOCKERHUB_AUTH=$(printf '%s' "${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD}" | base64 | tr -d '\n')
        cat > /kaniko/.docker/config.json <<EOF
      {
        "auths": {
          "${CI_REGISTRY}": { "auth": "${GITLAB_AUTH}" },
          "https://index.docker.io/v1/": { "auth": "${DOCKERHUB_AUTH}" }
        }
      }
      EOF
      else
              cat > /kaniko/.docker/config.json <<EOF
      {
        "auths": {
          "${CI_REGISTRY}": { "auth": "${GITLAB_AUTH}" }
        }
      }
      EOF
            fi
          - cd ${APP_DIR}
  script:
    - /kaniko/executor --context . --dockerfile production.Dockerfile --destination ${CI_REGISTRY_IMAGE}/${APP_DIR}${NAME_PROJECT}:${CI_COMMIT_SHORT_SHA} --destination docker.io/${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:${CI_COMMIT_SHORT_SHA} --skip-tls-verify

.deploy:
  stage: deploy
  image:
    name: alpine/curl:8.14.1
    entrypoint: [""]
  script:
    - >
      curl --request POST --url "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" --header 'accept: application/json' --header "authorization: Bearer ${RENDER_API_TOKEN}" --header 'content-type: application/json' --data "{\"clearCache\": \"clear\", \"imageUrl\": \"${CI_REGISTRY_IMAGE}/${APP_DIR}${NAME_PROJECT}:${CI_COMMIT_SHORT_SHA}\" }"

.rules-changes:
  rules:
    - changes:
        paths:
          - ${APP_DIR}/**/*

.npm-build:
  extends:
    - .build
    - .rules-changes
  image: node:18
  script:
    - npm ci --cache .npm --prefer-offline
    - npx npm run build
  artifacts:
    paths:
      - ${APP_DIR}/dist/
  cache:
    key:
      files:
        - ${APP_DIR}/package-lock.json
        - ${APP_DIR}/package.json
    paths:
      - ${APP_DIR}/.npm

.java-build:
  extends:
    - .build
    - .rules-changes
  image: maven:3.9.6-eclipse-temurin-21
  script:
    - mvn clean compile
  artifacts:
    expire_in: 1 day
    paths:
      - ${APP_DIR}/target/

.api-cache:
  cache:
    - key: api-pom-default-${CI_COMMIT_REF_SLUG}
      paths:
        - ${APP_DIR}/.m2/repository/

.client-variables:
  variables:
    APP_DIR: client
    RENDER_SERVICE_ID: ${RENDER_SERVICE_ID_CLIENT}

.api-variables:
  variables:
    APP_DIR: api
    RENDER_SERVICE_ID: ${RENDER_SERVICE_ID_API}

.environment-production-client:
  environment:
    name: production-client
    url: https://client-224df543.onrender.com

.environment-production-api:
  environment:
    name: production-api
    url: https://api-224df543.onrender.com

.test-sonarqube:
  script:
    - mvn compile
    - mvn sonar:sonar -Dsonar.projectKey=Vincent-Gillet_critik-cicd -Dsonar.organization=critik-sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=0648ab4d42c63de71c83f971849770c94cd9fb65

.mysql-service:
  services:
    - name: mysql:8
      alias: mysql
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: db-critik
    MYSQL_USER: user
    MYSQL_PASSWORD: password

#selenium-tests:
#  stage: test
#  image: maven:3.9.6-eclipse-temurin-21
#  extends:
#    - .mysql-service
#  services:
#    - name: selenium/standalone-chrome
#      alias: selenium
#    - name: mysql:8
#      alias: mysql
#      command: [ "--default-authentication-plugin=mysql_native_password" ]
#  variables:
#    APP_DIR: api
#    MYSQL_ROOT_PASSWORD: root
#    MYSQL_DATABASE: db-critik
#    MYSQL_USER: user
#    MYSQL_PASSWORD: password
#  before_script:
#    - apt-get update && apt-get install -y curl
#    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
#    - apt-get install -y nodejs
#    - cd client
#    - npm ci
#    - npx ng serve --port 4200 &
#    - sleep 30
#    - cd ../api
#  script:
#    - mvn test
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "push"'

build client:
  extends:
    - .client-variables
    - .change-folder
    - .npm-build

build api:
  extends:
    - .api-variables
    - .change-folder
    - .java-build
    - .api-cache
    - .test-sonarqube

package client image:
  extends:
    - .client-variables
    - .change-folder
    - .docker-build
    - .rules-changes

package api image:
  extends:
    - .api-variables
    - .change-folder
    - .docker-build
    - .rules-changes
    - .mysql-service
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]

deploy client:
  extends:
    - .client-variables
    - .environment-production-client
    - .rules-changes
    - .deploy

deploy api:
  extends:
    - .api-variables
    - .environment-production-api
    - .rules-changes
    - .deploy
